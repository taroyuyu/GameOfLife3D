/** \file
 *  This C source file was generated by $ANTLR version 3.3 Nov 30, 2010 12:45:30
 *
 *     -  From the grammar source file : ColorSetDef.g
 *     -                            On : 2011-02-27 23:08:07
 *     -                for the parser : ColorSetDefParserParser *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

// @parser::header

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "ColorSetDefParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define     CTX ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef  SCOPE_TYPE
#undef  SCOPE_STACK
#undef  SCOPE_TOP
#define SCOPE_TYPE(scope)   pColorSetDefParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pColorSetDefParser_##scope##Stack
#define SCOPE_TOP(scope)    ctx->pColorSetDefParser_##scope##Top
#define SCOPE_SIZE(scope)       ctx->pColorSetDefParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)    (ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef      PARSER
#undef      RECOGNIZER
#undef      HAVEPARSEDRULE
#undef      MEMOIZE
#undef      INPUT
#undef      STRSTREAM
#undef      HASEXCEPTION
#undef      EXCEPTION
#undef      MATCHT
#undef      MATCHANYT
#undef      FOLLOWSTACK
#undef      FOLLOWPUSH
#undef      FOLLOWPOP
#undef      PRECOVER
#undef      PREPORTERROR
#undef      LA
#undef      LT
#undef      CONSTRUCTEX
#undef      CONSUME
#undef      MARK
#undef      REWIND
#undef      REWINDLAST
#undef      PERRORRECOVERY
#undef      HASFAILED
#undef      FAILEDFLAG
#undef      RECOVERFROMMISMATCHEDSET
#undef      RECOVERFROMMISMATCHEDELEMENT
#undef      INDEX
#undef      ADAPTOR
#undef      SEEK
#undef      RULEMEMO
#undef      DBG

#define     PARSER              ctx->pParser
#define     RECOGNIZER              PARSER->rec
#define     PSRSTATE                RECOGNIZER->state
#define     HAVEPARSEDRULE(r)           RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define     MEMOIZE(ri,si)          RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define     INPUT               PARSER->tstream
#define     STRSTREAM               INPUT
#define     ISTREAM             INPUT->istream
#define     INDEX()             ISTREAM->index(INPUT->istream)
#define     HASEXCEPTION()          (PSRSTATE->error == ANTLR3_TRUE)
#define     EXCEPTION               PSRSTATE->exception
#define     MATCHT(t, fs)           RECOGNIZER->match(RECOGNIZER, t, fs)
#define     MATCHANYT()             RECOGNIZER->matchAny(RECOGNIZER)
#define     FOLLOWSTACK             PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define     FOLLOWPUSH(x)
#define     FOLLOWPOP()
#else
#define     FOLLOWPUSH(x)           FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define     FOLLOWPOP()             FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define     PRECOVER()              RECOGNIZER->recover(RECOGNIZER)
#define     PREPORTERROR()          RECOGNIZER->reportError(RECOGNIZER)
#define     LA(n)               INPUT->istream->_LA(ISTREAM, n)
#define     LT(n)               INPUT->_LT(INPUT, n)
#define     CONSTRUCTEX()           RECOGNIZER->exConstruct(RECOGNIZER)
#define     CONSUME()               ISTREAM->consume(ISTREAM)
#define     MARK()              ISTREAM->mark(ISTREAM)
#define     REWIND(m)               ISTREAM->rewind(ISTREAM, m)
#define     REWINDLAST()            ISTREAM->rewindLast(ISTREAM)
#define     SEEK(n)             ISTREAM->seek(ISTREAM, n)
#define     PERRORRECOVERY          PSRSTATE->errorRecovery
#define     FAILEDFLAG              PSRSTATE->failed
#define     HASFAILED()             (FAILEDFLAG == ANTLR3_TRUE)
#define     BACKTRACKING            PSRSTATE->backtracking
#define     RECOVERFROMMISMATCHEDSET(s)     RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define     RECOVERFROMMISMATCHEDELEMENT(e) RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define     RULEMEMO                        PSRSTATE->ruleMemo
#define     DBG                             RECOGNIZER->debugger

#define     TOKTEXT(tok, txt)               tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define     UP      ANTLR3_TOKEN_UP
#define     DOWN    ANTLR3_TOKEN_DOWN
#define     EOR     ANTLR3_TOKEN_EOR
#define     INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */


/* globalAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declaration for creating a ColorSetDefParser_ColorSet scope set
 */
static pColorSetDefParser_ColorSet_SCOPE   pColorSetDefParser_ColorSetPush(pColorSetDefParser ctx);
static void ANTLR3_CDECL ColorSetFree(pColorSetDefParser_ColorSet_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* globalAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL ColorSetFree(pColorSetDefParser_ColorSet_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a ColorSetDefParser ColorSet scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code:
 * \code
 *   ctx->pColorSetDefParser_ColorSetTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as:
 * \code
 *   void ANTLR3_CDECL myfunc( pColorSetDefParser_ColorSet_SCOPE ptr).
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 *
 */
static pColorSetDefParser_ColorSet_SCOPE
pColorSetDefParser_ColorSetPush(pColorSetDefParser ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pColorSetDefParser_ColorSet_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pColorSetDefParser_ColorSetStack->size(ctx->pColorSetDefParser_ColorSetStack) > ctx->pColorSetDefParser_ColorSetStack_limit) {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pColorSetDefParser_ColorSet_SCOPE)ctx->pColorSetDefParser_ColorSetStack->get(ctx->pColorSetDefParser_ColorSetStack, ctx->pColorSetDefParser_ColorSetStack_limit);
    } else {
        // Need a new allocation
        //
        newAttributes = (pColorSetDefParser_ColorSet_SCOPE) ANTLR3_MALLOC(sizeof(ColorSetDefParser_ColorSet_SCOPE));
        if  (newAttributes != NULL) {
            /* Standard ANTLR3 library implementation
             */
            ctx->pColorSetDefParser_ColorSetStack->push(ctx->pColorSetDefParser_ColorSetStack, newAttributes, (void (*)(void *))ColorSetFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pColorSetDefParser_ColorSetStack_limit++;

    /* Return value is the pointer to the new entry, which may be used locally
     * without de-referencing via the context.
     */
    return  newAttributes;
}



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   ColorSetDefParserTokenNames[25 + 4]
= {
    (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
    (pANTLR3_UINT8) "<EOR>",
    (pANTLR3_UINT8) "<DOWN>",
    (pANTLR3_UINT8) "<UP>",
    (pANTLR3_UINT8) "ID",
    (pANTLR3_UINT8) "INT",
    (pANTLR3_UINT8) "HEX_DIGIT",
    (pANTLR3_UINT8) "HEXINT",
    (pANTLR3_UINT8) "EXPONENT",
    (pANTLR3_UINT8) "FLOAT",
    (pANTLR3_UINT8) "COMMENT",
    (pANTLR3_UINT8) "WS",
    (pANTLR3_UINT8) "ESC_SEQ",
    (pANTLR3_UINT8) "STRING",
    (pANTLR3_UINT8) "UNICODE_ESC",
    (pANTLR3_UINT8) "OCTAL_ESC",
    (pANTLR3_UINT8) "','",
    (pANTLR3_UINT8) "'solid'",
    (pANTLR3_UINT8) "'['",
    (pANTLR3_UINT8) "']'",
    (pANTLR3_UINT8) "'('",
    (pANTLR3_UINT8) "')'",
    (pANTLR3_UINT8) "'linear'",
    (pANTLR3_UINT8) "'TOP_BOTTOM'",
    (pANTLR3_UINT8) "'TOPLEFT_BOTTOMRIGHT'",
    (pANTLR3_UINT8) "'@'",
    (pANTLR3_UINT8) "'radial'",
    (pANTLR3_UINT8) "'rgba('",
    (pANTLR3_UINT8) "'hsba('"
};


/* globalAttributeScopeFuncMacro(scope)
 */
/** Function  for popping the top value from a pColorSetDefParser_ColorSetStack
 */
void
pColorSetDefParser_ColorSetPop(pColorSetDefParser ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
    // If the user supplied the scope entries with a free function,then call it first
    //
    if  (SCOPE_TOP(ColorSet)->free != NULL) {
        SCOPE_TOP(ColorSet)->free(SCOPE_TOP(ColorSet));
    }

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pColorSetDefParser_ColorSetStack_limit--;
    SCOPE_TOP(ColorSet) = (pColorSetDefParser_ColorSet_SCOPE)(ctx->pColorSetDefParser_ColorSetStack->get(ctx->pColorSetDefParser_ColorSetStack, ctx->pColorSetDefParser_ColorSetStack_limit - 1));
}

// Forward declare the locally static matching functions we have generated.
//
static graphics::color::colorsetdef::ColorSetDO*    colorSetDef    (pColorSetDefParser ctx);
static void colorDef    (pColorSetDefParser ctx);
static void solidColor    (pColorSetDefParser ctx);
static void linearColor    (pColorSetDefParser ctx);
static void linearColorDirection    (pColorSetDefParser ctx);
static void linerColorElement    (pColorSetDefParser ctx);
static void radialColor    (pColorSetDefParser ctx);
static void radialColorElement    (pColorSetDefParser ctx);
static void rgba    (pColorSetDefParser ctx);
static void hsba    (pColorSetDefParser ctx);
static void pos    (pColorSetDefParser ctx);
static void ColorSetDefParserFree(pColorSetDefParser ctx);
static void     ColorSetDefParserReset (pColorSetDefParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static  void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "ColorSetDef.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
    return fileName;
}
/** \brief Create a new ColorSetDefParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pColorSetDefParser
ColorSetDefParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
    // See if we can create a new parser with the standard constructor
    //
    return ColorSetDefParserNewSSD(instream, NULL);
}

/** \brief Create a new ColorSetDefParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pColorSetDefParser
ColorSetDefParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pColorSetDefParser ctx;     /* Context structure we will build and return   */

    ctx = (pColorSetDefParser) ANTLR3_CALLOC(1, sizeof(ColorSetDefParser));

    if  (ctx == NULL) {
        // Failed to allocate memory for parser context
        //
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in ColorSetDefParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser        = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our ColorSetDefParser interface
     */
    ctx->colorSetDef    = colorSetDef;
    ctx->colorDef   = colorDef;
    ctx->solidColor = solidColor;
    ctx->linearColor    = linearColor;
    ctx->linearColorDirection   = linearColorDirection;
    ctx->linerColorElement  = linerColorElement;
    ctx->radialColor    = radialColor;
    ctx->radialColorElement = radialColorElement;
    ctx->rgba   = rgba;
    ctx->hsba   = hsba;
    ctx->pos    = pos;
    ctx->free           = ColorSetDefParserFree;
    ctx->reset          = ColorSetDefParserReset;
    ctx->getGrammarFileName = getGrammarFileName;

    /* Install the scope pushing methods.
     */
    /* globalAttributeScope(scope)
     */
    ctx->pColorSetDefParser_ColorSetPush     = pColorSetDefParser_ColorSetPush;
    ctx->pColorSetDefParser_ColorSetStack    = antlr3StackNew(0);
    ctx->pColorSetDefParser_ColorSetStack_limit    = 0;
    ctx->pColorSetDefParser_ColorSetTop      = NULL;






    /* Install the token table
     */
    PSRSTATE->tokenNames   = ColorSetDefParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
ColorSetDefParserReset (pColorSetDefParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
static void
ColorSetDefParserFree(pColorSetDefParser ctx)
{
    /* Free any scope memory
     */
    /* globalAttributeScope(scope)
     */
    ctx->pColorSetDefParser_ColorSetStack->free(ctx->pColorSetDefParser_ColorSetStack);



    // Free this parser
    //
    ctx->pParser->free(ctx->pParser);

    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
}

/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
    return ColorSetDefParserTokenNames;
}


/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_colorDef_in_colorSetDef648  */
static  ANTLR3_BITWORD FOLLOW_colorDef_in_colorSetDef648_bits[] = { ANTLR3_UINT64_LIT(0x0000000000010002) };
static  ANTLR3_BITSET_LIST FOLLOW_colorDef_in_colorSetDef648    = { FOLLOW_colorDef_in_colorSetDef648_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_colorSetDef651  */
static  ANTLR3_BITWORD FOLLOW_16_in_colorSetDef651_bits[]   = { ANTLR3_UINT64_LIT(0x0000000004420000) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_colorSetDef651  = { FOLLOW_16_in_colorSetDef651_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_colorDef_in_colorSetDef653  */
static  ANTLR3_BITWORD FOLLOW_colorDef_in_colorSetDef653_bits[] = { ANTLR3_UINT64_LIT(0x0000000000010002) };
static  ANTLR3_BITSET_LIST FOLLOW_colorDef_in_colorSetDef653    = { FOLLOW_colorDef_in_colorSetDef653_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_solidColor_in_colorDef671  */
static  ANTLR3_BITWORD FOLLOW_solidColor_in_colorDef671_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_solidColor_in_colorDef671 = { FOLLOW_solidColor_in_colorDef671_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_linearColor_in_colorDef675  */
static  ANTLR3_BITWORD FOLLOW_linearColor_in_colorDef675_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_linearColor_in_colorDef675    = { FOLLOW_linearColor_in_colorDef675_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_radialColor_in_colorDef679  */
static  ANTLR3_BITWORD FOLLOW_radialColor_in_colorDef679_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_radialColor_in_colorDef679    = { FOLLOW_radialColor_in_colorDef679_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_17_in_solidColor695  */
static  ANTLR3_BITWORD FOLLOW_17_in_solidColor695_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000140000) };
static  ANTLR3_BITSET_LIST FOLLOW_17_in_solidColor695   = { FOLLOW_17_in_solidColor695_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_solidColor698  */
static  ANTLR3_BITWORD FOLLOW_18_in_solidColor698_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_solidColor698   = { FOLLOW_18_in_solidColor698_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_solidColor702  */
static  ANTLR3_BITWORD FOLLOW_ID_in_solidColor702_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_solidColor702   = { FOLLOW_ID_in_solidColor702_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_19_in_solidColor704  */
static  ANTLR3_BITWORD FOLLOW_19_in_solidColor704_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_19_in_solidColor704   = { FOLLOW_19_in_solidColor704_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_20_in_solidColor708  */
static  ANTLR3_BITWORD FOLLOW_20_in_solidColor708_bits[]    = { ANTLR3_UINT64_LIT(0x0000000018000000) };
static  ANTLR3_BITSET_LIST FOLLOW_20_in_solidColor708   = { FOLLOW_20_in_solidColor708_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_rgba_in_solidColor712  */
static  ANTLR3_BITWORD FOLLOW_rgba_in_solidColor712_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_rgba_in_solidColor712 = { FOLLOW_rgba_in_solidColor712_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_hsba_in_solidColor716  */
static  ANTLR3_BITWORD FOLLOW_hsba_in_solidColor716_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_hsba_in_solidColor716 = { FOLLOW_hsba_in_solidColor716_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_21_in_solidColor720  */
static  ANTLR3_BITWORD FOLLOW_21_in_solidColor720_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_21_in_solidColor720   = { FOLLOW_21_in_solidColor720_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_22_in_linearColor742  */
static  ANTLR3_BITWORD FOLLOW_22_in_linearColor742_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000140000) };
static  ANTLR3_BITSET_LIST FOLLOW_22_in_linearColor742  = { FOLLOW_22_in_linearColor742_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_linearColor745  */
static  ANTLR3_BITWORD FOLLOW_18_in_linearColor745_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_linearColor745  = { FOLLOW_18_in_linearColor745_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_linearColor749  */
static  ANTLR3_BITWORD FOLLOW_ID_in_linearColor749_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_linearColor749  = { FOLLOW_ID_in_linearColor749_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_19_in_linearColor751  */
static  ANTLR3_BITWORD FOLLOW_19_in_linearColor751_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_19_in_linearColor751  = { FOLLOW_19_in_linearColor751_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_20_in_linearColor755  */
static  ANTLR3_BITWORD FOLLOW_20_in_linearColor755_bits[]   = { ANTLR3_UINT64_LIT(0x0000000001800000) };
static  ANTLR3_BITSET_LIST FOLLOW_20_in_linearColor755  = { FOLLOW_20_in_linearColor755_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_linearColorDirection_in_linearColor757  */
static  ANTLR3_BITWORD FOLLOW_linearColorDirection_in_linearColor757_bits[] = { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_linearColorDirection_in_linearColor757    = { FOLLOW_linearColorDirection_in_linearColor757_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_linearColor759  */
static  ANTLR3_BITWORD FOLLOW_16_in_linearColor759_bits[]   = { ANTLR3_UINT64_LIT(0x0000000018000000) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_linearColor759  = { FOLLOW_16_in_linearColor759_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_linerColorElement_in_linearColor761  */
static  ANTLR3_BITWORD FOLLOW_linerColorElement_in_linearColor761_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_linerColorElement_in_linearColor761   = { FOLLOW_linerColorElement_in_linearColor761_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_linearColor764  */
static  ANTLR3_BITWORD FOLLOW_16_in_linearColor764_bits[]   = { ANTLR3_UINT64_LIT(0x0000000018000000) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_linearColor764  = { FOLLOW_16_in_linearColor764_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_linerColorElement_in_linearColor766  */
static  ANTLR3_BITWORD FOLLOW_linerColorElement_in_linearColor766_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000210000) };
static  ANTLR3_BITSET_LIST FOLLOW_linerColorElement_in_linearColor766   = { FOLLOW_linerColorElement_in_linearColor766_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_21_in_linearColor770  */
static  ANTLR3_BITWORD FOLLOW_21_in_linearColor770_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_21_in_linearColor770  = { FOLLOW_21_in_linearColor770_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_linearColorDirection786  */
static  ANTLR3_BITWORD FOLLOW_set_in_linearColorDirection786_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_linearColorDirection786    = { FOLLOW_set_in_linearColorDirection786_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_rgba_in_linerColorElement808  */
static  ANTLR3_BITWORD FOLLOW_rgba_in_linerColorElement808_bits[]   = { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_rgba_in_linerColorElement808  = { FOLLOW_rgba_in_linerColorElement808_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_hsba_in_linerColorElement812  */
static  ANTLR3_BITWORD FOLLOW_hsba_in_linerColorElement812_bits[]   = { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_hsba_in_linerColorElement812  = { FOLLOW_hsba_in_linerColorElement812_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_linerColorElement816  */
static  ANTLR3_BITWORD FOLLOW_25_in_linerColorElement816_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_linerColorElement816    = { FOLLOW_25_in_linerColorElement816_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_pos_in_linerColorElement818  */
static  ANTLR3_BITWORD FOLLOW_pos_in_linerColorElement818_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_pos_in_linerColorElement818   = { FOLLOW_pos_in_linerColorElement818_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_26_in_radialColor839  */
static  ANTLR3_BITWORD FOLLOW_26_in_radialColor839_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000140000) };
static  ANTLR3_BITSET_LIST FOLLOW_26_in_radialColor839  = { FOLLOW_26_in_radialColor839_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_18_in_radialColor842  */
static  ANTLR3_BITWORD FOLLOW_18_in_radialColor842_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_18_in_radialColor842  = { FOLLOW_18_in_radialColor842_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_radialColor846  */
static  ANTLR3_BITWORD FOLLOW_ID_in_radialColor846_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_radialColor846  = { FOLLOW_ID_in_radialColor846_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_19_in_radialColor848  */
static  ANTLR3_BITWORD FOLLOW_19_in_radialColor848_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_19_in_radialColor848  = { FOLLOW_19_in_radialColor848_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_20_in_radialColor852  */
static  ANTLR3_BITWORD FOLLOW_20_in_radialColor852_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_20_in_radialColor852  = { FOLLOW_20_in_radialColor852_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_radialColor856  */
static  ANTLR3_BITWORD FOLLOW_FLOAT_in_radialColor856_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_radialColor856   = { FOLLOW_FLOAT_in_radialColor856_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_radialColor858  */
static  ANTLR3_BITWORD FOLLOW_16_in_radialColor858_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_radialColor858  = { FOLLOW_16_in_radialColor858_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_radialColor862  */
static  ANTLR3_BITWORD FOLLOW_FLOAT_in_radialColor862_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_radialColor862   = { FOLLOW_FLOAT_in_radialColor862_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_radialColor864  */
static  ANTLR3_BITWORD FOLLOW_16_in_radialColor864_bits[]   = { ANTLR3_UINT64_LIT(0x0000000018000000) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_radialColor864  = { FOLLOW_16_in_radialColor864_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_radialColorElement_in_radialColor866  */
static  ANTLR3_BITWORD FOLLOW_radialColorElement_in_radialColor866_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_radialColorElement_in_radialColor866  = { FOLLOW_radialColorElement_in_radialColor866_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_radialColor869  */
static  ANTLR3_BITWORD FOLLOW_16_in_radialColor869_bits[]   = { ANTLR3_UINT64_LIT(0x0000000018000000) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_radialColor869  = { FOLLOW_16_in_radialColor869_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_radialColorElement_in_radialColor871  */
static  ANTLR3_BITWORD FOLLOW_radialColorElement_in_radialColor871_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000210000) };
static  ANTLR3_BITSET_LIST FOLLOW_radialColorElement_in_radialColor871  = { FOLLOW_radialColorElement_in_radialColor871_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_21_in_radialColor875  */
static  ANTLR3_BITWORD FOLLOW_21_in_radialColor875_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_21_in_radialColor875  = { FOLLOW_21_in_radialColor875_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_rgba_in_radialColorElement891  */
static  ANTLR3_BITWORD FOLLOW_rgba_in_radialColorElement891_bits[]  = { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_rgba_in_radialColorElement891 = { FOLLOW_rgba_in_radialColorElement891_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_hsba_in_radialColorElement895  */
static  ANTLR3_BITWORD FOLLOW_hsba_in_radialColorElement895_bits[]  = { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_hsba_in_radialColorElement895 = { FOLLOW_hsba_in_radialColorElement895_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_25_in_radialColorElement899  */
static  ANTLR3_BITWORD FOLLOW_25_in_radialColorElement899_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_25_in_radialColorElement899   = { FOLLOW_25_in_radialColorElement899_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_pos_in_radialColorElement901  */
static  ANTLR3_BITWORD FOLLOW_pos_in_radialColorElement901_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_pos_in_radialColorElement901  = { FOLLOW_pos_in_radialColorElement901_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_rgba916  */
static  ANTLR3_BITWORD FOLLOW_27_in_rgba916_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_rgba916 = { FOLLOW_27_in_rgba916_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_rgba920  */
static  ANTLR3_BITWORD FOLLOW_FLOAT_in_rgba920_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_rgba920  = { FOLLOW_FLOAT_in_rgba920_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_rgba922  */
static  ANTLR3_BITWORD FOLLOW_16_in_rgba922_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_rgba922 = { FOLLOW_16_in_rgba922_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_rgba926  */
static  ANTLR3_BITWORD FOLLOW_FLOAT_in_rgba926_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_rgba926  = { FOLLOW_FLOAT_in_rgba926_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_rgba928  */
static  ANTLR3_BITWORD FOLLOW_16_in_rgba928_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_rgba928 = { FOLLOW_16_in_rgba928_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_rgba932  */
static  ANTLR3_BITWORD FOLLOW_FLOAT_in_rgba932_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_rgba932  = { FOLLOW_FLOAT_in_rgba932_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_rgba934  */
static  ANTLR3_BITWORD FOLLOW_16_in_rgba934_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_rgba934 = { FOLLOW_16_in_rgba934_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_rgba938  */
static  ANTLR3_BITWORD FOLLOW_FLOAT_in_rgba938_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_rgba938  = { FOLLOW_FLOAT_in_rgba938_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_21_in_rgba940  */
static  ANTLR3_BITWORD FOLLOW_21_in_rgba940_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_21_in_rgba940 = { FOLLOW_21_in_rgba940_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_27_in_rgba951  */
static  ANTLR3_BITWORD FOLLOW_27_in_rgba951_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_27_in_rgba951 = { FOLLOW_27_in_rgba951_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_HEXINT_in_rgba955  */
static  ANTLR3_BITWORD FOLLOW_HEXINT_in_rgba955_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_HEXINT_in_rgba955 = { FOLLOW_HEXINT_in_rgba955_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_rgba957  */
static  ANTLR3_BITWORD FOLLOW_16_in_rgba957_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_rgba957 = { FOLLOW_16_in_rgba957_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_rgba961  */
static  ANTLR3_BITWORD FOLLOW_FLOAT_in_rgba961_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_rgba961  = { FOLLOW_FLOAT_in_rgba961_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_21_in_rgba963  */
static  ANTLR3_BITWORD FOLLOW_21_in_rgba963_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_21_in_rgba963 = { FOLLOW_21_in_rgba963_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_28_in_hsba978  */
static  ANTLR3_BITWORD FOLLOW_28_in_hsba978_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_28_in_hsba978 = { FOLLOW_28_in_hsba978_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_hsba982  */
static  ANTLR3_BITWORD FOLLOW_FLOAT_in_hsba982_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_hsba982  = { FOLLOW_FLOAT_in_hsba982_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_hsba984  */
static  ANTLR3_BITWORD FOLLOW_16_in_hsba984_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_hsba984 = { FOLLOW_16_in_hsba984_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_hsba988  */
static  ANTLR3_BITWORD FOLLOW_FLOAT_in_hsba988_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_hsba988  = { FOLLOW_FLOAT_in_hsba988_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_hsba990  */
static  ANTLR3_BITWORD FOLLOW_16_in_hsba990_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_hsba990 = { FOLLOW_16_in_hsba990_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_hsba994  */
static  ANTLR3_BITWORD FOLLOW_FLOAT_in_hsba994_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_hsba994  = { FOLLOW_FLOAT_in_hsba994_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_16_in_hsba996  */
static  ANTLR3_BITWORD FOLLOW_16_in_hsba996_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_16_in_hsba996 = { FOLLOW_16_in_hsba996_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_hsba1000  */
static  ANTLR3_BITWORD FOLLOW_FLOAT_in_hsba1000_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_hsba1000 = { FOLLOW_FLOAT_in_hsba1000_bits, 1    };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_21_in_hsba1002  */
static  ANTLR3_BITWORD FOLLOW_21_in_hsba1002_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_21_in_hsba1002    = { FOLLOW_21_in_hsba1002_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_pos1017  */
static  ANTLR3_BITWORD FOLLOW_FLOAT_in_pos1017_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_pos1017  = { FOLLOW_FLOAT_in_pos1017_bits, 1 };




/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start colorSetDef
 * ColorSetDef.g:173:1: colorSetDef returns [graphics::color::colorsetdef::ColorSetDO* ret] : colorDef ( ',' colorDef )* ;
 */
static graphics::color::colorsetdef::ColorSetDO*
colorSetDef(pColorSetDefParser ctx)
{
    graphics::color::colorsetdef::ColorSetDO* ret;

    /* Initialize rule variables
     */
    ctx->pColorSetDefParser_ColorSetTop = pColorSetDefParser_ColorSetPush(ctx);


    (SCOPE_TOP(ColorSet))->pColorSet = new graphics::color::colorsetdef::ColorSetDO();

    {
        // ColorSetDef.g:180:2: ( colorDef ( ',' colorDef )* )
        // ColorSetDef.g:181:2: colorDef ( ',' colorDef )*
        {
            FOLLOWPUSH(FOLLOW_colorDef_in_colorSetDef648);
            colorDef(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION()) {
                goto rulecolorSetDefEx;
            }


            // ColorSetDef.g:181:11: ( ',' colorDef )*

            for (;;) {
                int alt1 = 2;
                switch ( LA(1) ) {
                case 16: {
                    alt1 = 1;
                }
                break;

                }

                switch (alt1) {
                case 1:
                    // ColorSetDef.g:181:12: ',' colorDef
                {
                    MATCHT(16, &FOLLOW_16_in_colorSetDef651);
                    if  (HASEXCEPTION()) {
                        goto rulecolorSetDefEx;
                    }

                    FOLLOWPUSH(FOLLOW_colorDef_in_colorSetDef653);
                    colorDef(ctx);

                    FOLLOWPOP();
                    if  (HASEXCEPTION()) {
                        goto rulecolorSetDefEx;
                    }


                }
                break;

                default:
                    goto loop1; /* break out of the loop */
                    break;
                }
            }
loop1: ; /* Jump out to here if this rule does not match */

            {

                ret =    (SCOPE_TOP(ColorSet))->pColorSet;

            }

        }

    }


    // This is where rules clean up and exit
    //
    goto rulecolorSetDefEx; /* Prevent compiler warnings */
rulecolorSetDefEx:
    ;

    if (HASEXCEPTION()) {
        PREPORTERROR();
        PRECOVER();
    } else {
        {


        }
    }

    pColorSetDefParser_ColorSetPop(ctx);

    return ret;
}
/* $ANTLR end colorSetDef */

/**
 * $ANTLR start colorDef
 * ColorSetDef.g:187:1: colorDef : ( solidColor | linearColor | radialColor );
 */
static void
colorDef(pColorSetDefParser ctx)
{
    /* Initialize rule variables
     */


    {
        {
            //  ColorSetDef.g:187:10: ( solidColor | linearColor | radialColor )

            ANTLR3_UINT32 alt2;

            alt2 = 3;

            switch ( LA(1) ) {
            case 17: {
                alt2 = 1;
            }
            break;
            case 22: {
                alt2 = 2;
            }
            break;
            case 26: {
                alt2 = 3;
            }
            break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto rulecolorDefEx;
            }

            switch (alt2) {
            case 1:
                // ColorSetDef.g:188:2: solidColor
            {
                FOLLOWPUSH(FOLLOW_solidColor_in_colorDef671);
                solidColor(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION()) {
                    goto rulecolorDefEx;
                }


            }
            break;
            case 2:
                // ColorSetDef.g:188:15: linearColor
            {
                FOLLOWPUSH(FOLLOW_linearColor_in_colorDef675);
                linearColor(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION()) {
                    goto rulecolorDefEx;
                }


            }
            break;
            case 3:
                // ColorSetDef.g:188:29: radialColor
            {
                FOLLOWPUSH(FOLLOW_radialColor_in_colorDef679);
                radialColor(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION()) {
                    goto rulecolorDefEx;
                }


            }
            break;

            }
        }
    }


    // This is where rules clean up and exit
    //
    goto rulecolorDefEx; /* Prevent compiler warnings */
rulecolorDefEx:
    ;

    if (HASEXCEPTION()) {
        PREPORTERROR();
        PRECOVER();
    }


    return ;
}
/* $ANTLR end colorDef */

/**
 * $ANTLR start solidColor
 * ColorSetDef.g:190:1: solidColor : 'solid' ( '[' label= ID ']' )? '(' ( rgba | hsba ) ')' ;
 */
static void
solidColor(pColorSetDefParser ctx)
{
    pANTLR3_COMMON_TOKEN    label;

    /* Initialize rule variables
     */



    std::shared_ptr<colorsetdef::SolidColorDO> solidColor =
        std::make_shared<colorsetdef::SolidColorDO>();
    (SCOPE_TOP(ColorSet))->pColorSet->colors.push_back(solidColor);

    label       = NULL;

    {
        // ColorSetDef.g:196:2: ( 'solid' ( '[' label= ID ']' )? '(' ( rgba | hsba ) ')' )
        // ColorSetDef.g:197:2: 'solid' ( '[' label= ID ']' )? '(' ( rgba | hsba ) ')'
        {
            MATCHT(17, &FOLLOW_17_in_solidColor695);
            if  (HASEXCEPTION()) {
                goto rulesolidColorEx;
            }


            // ColorSetDef.g:197:10: ( '[' label= ID ']' )?
            {
                int alt3 = 2;
                switch ( LA(1) ) {
                case 18: {
                    alt3 = 1;
                }
                break;
                }

                switch (alt3) {
                case 1:
                    // ColorSetDef.g:197:11: '[' label= ID ']'
                {
                    MATCHT(18, &FOLLOW_18_in_solidColor698);
                    if  (HASEXCEPTION()) {
                        goto rulesolidColorEx;
                    }

                    label = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_solidColor702);
                    if  (HASEXCEPTION()) {
                        goto rulesolidColorEx;
                    }

                    MATCHT(19, &FOLLOW_19_in_solidColor704);
                    if  (HASEXCEPTION()) {
                        goto rulesolidColorEx;
                    }


                }
                break;

                }
            }
            MATCHT(20, &FOLLOW_20_in_solidColor708);
            if  (HASEXCEPTION()) {
                goto rulesolidColorEx;
            }


            // ColorSetDef.g:197:34: ( rgba | hsba )
            {
                int alt4 = 2;
                switch ( LA(1) ) {
                case 27: {
                    alt4 = 1;
                }
                break;
                case 28: {
                    alt4 = 2;
                }
                break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 4;
                    EXCEPTION->state        = 0;


                    goto rulesolidColorEx;
                }

                switch (alt4) {
                case 1:
                    // ColorSetDef.g:197:36: rgba
                {
                    FOLLOWPUSH(FOLLOW_rgba_in_solidColor712);
                    rgba(ctx);

                    FOLLOWPOP();
                    if  (HASEXCEPTION()) {
                        goto rulesolidColorEx;
                    }


                }
                break;
                case 2:
                    // ColorSetDef.g:197:43: hsba
                {
                    FOLLOWPUSH(FOLLOW_hsba_in_solidColor716);
                    hsba(ctx);

                    FOLLOWPOP();
                    if  (HASEXCEPTION()) {
                        goto rulesolidColorEx;
                    }


                }
                break;

                }
            }
            MATCHT(21, &FOLLOW_21_in_solidColor720);
            if  (HASEXCEPTION()) {
                goto rulesolidColorEx;
            }

            {

                if ( (SCOPE_TOP(ColorSet))->pColorSet->colors.back()->GetColorType() == colorsetdef::COLOR_TYPE_SOLID) {
                    std::shared_ptr<colorsetdef::SolidColorDO> solidColor =
                        std::dynamic_pointer_cast<colorsetdef::SolidColorDO>
                        (   (SCOPE_TOP(ColorSet))->pColorSet->colors.back());
                    if (label != NULL) {
                        solidColor->label = trimSingleQuote((wchar_t*)(label->getText(label))->chars);
                    }
                    solidColor->colorValue = colorsetdef::ColorValueDO( (SCOPE_TOP(ColorSet))->colorValueType,
                                             (SCOPE_TOP(ColorSet))->value1,
                                             (SCOPE_TOP(ColorSet))->value2,
                                             (SCOPE_TOP(ColorSet))->value3,
                                             (SCOPE_TOP(ColorSet))->value4);
                }

            }

        }

    }


    // This is where rules clean up and exit
    //
    goto rulesolidColorEx; /* Prevent compiler warnings */
rulesolidColorEx:
    ;

    if (HASEXCEPTION()) {
        PREPORTERROR();
        PRECOVER();
    }


    return ;
}
/* $ANTLR end solidColor */

/**
 * $ANTLR start linearColor
 * ColorSetDef.g:215:1: linearColor : 'linear' ( '[' label= ID ']' )? '(' linearColorDirection ',' linerColorElement ( ',' linerColorElement )+ ')' ;
 */
static void
linearColor(pColorSetDefParser ctx)
{
    pANTLR3_COMMON_TOKEN    label;

    /* Initialize rule variables
     */



    std::shared_ptr<colorsetdef::LinearColorDO> linearColor =
        std::make_shared<colorsetdef::LinearColorDO>();
    (SCOPE_TOP(ColorSet))->pColorSet->colors.push_back(linearColor);

    label       = NULL;

    {
        // ColorSetDef.g:221:2: ( 'linear' ( '[' label= ID ']' )? '(' linearColorDirection ',' linerColorElement ( ',' linerColorElement )+ ')' )
        // ColorSetDef.g:222:2: 'linear' ( '[' label= ID ']' )? '(' linearColorDirection ',' linerColorElement ( ',' linerColorElement )+ ')'
        {
            MATCHT(22, &FOLLOW_22_in_linearColor742);
            if  (HASEXCEPTION()) {
                goto rulelinearColorEx;
            }


            // ColorSetDef.g:222:11: ( '[' label= ID ']' )?
            {
                int alt5 = 2;
                switch ( LA(1) ) {
                case 18: {
                    alt5 = 1;
                }
                break;
                }

                switch (alt5) {
                case 1:
                    // ColorSetDef.g:222:12: '[' label= ID ']'
                {
                    MATCHT(18, &FOLLOW_18_in_linearColor745);
                    if  (HASEXCEPTION()) {
                        goto rulelinearColorEx;
                    }

                    label = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_linearColor749);
                    if  (HASEXCEPTION()) {
                        goto rulelinearColorEx;
                    }

                    MATCHT(19, &FOLLOW_19_in_linearColor751);
                    if  (HASEXCEPTION()) {
                        goto rulelinearColorEx;
                    }


                }
                break;

                }
            }
            MATCHT(20, &FOLLOW_20_in_linearColor755);
            if  (HASEXCEPTION()) {
                goto rulelinearColorEx;
            }

            FOLLOWPUSH(FOLLOW_linearColorDirection_in_linearColor757);
            linearColorDirection(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION()) {
                goto rulelinearColorEx;
            }

            MATCHT(16, &FOLLOW_16_in_linearColor759);
            if  (HASEXCEPTION()) {
                goto rulelinearColorEx;
            }

            FOLLOWPUSH(FOLLOW_linerColorElement_in_linearColor761);
            linerColorElement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION()) {
                goto rulelinearColorEx;
            }

            // ColorSetDef.g:222:78: ( ',' linerColorElement )+
            {
                int cnt6 = 0;

                for (;;) {
                    int alt6 = 2;
                    switch ( LA(1) ) {
                    case 16: {
                        alt6 = 1;
                    }
                    break;

                    }

                    switch (alt6) {
                    case 1:
                        // ColorSetDef.g:222:79: ',' linerColorElement
                    {
                        MATCHT(16, &FOLLOW_16_in_linearColor764);
                        if  (HASEXCEPTION()) {
                            goto rulelinearColorEx;
                        }

                        FOLLOWPUSH(FOLLOW_linerColorElement_in_linearColor766);
                        linerColorElement(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION()) {
                            goto rulelinearColorEx;
                        }


                    }
                    break;

                    default:

                        if ( cnt6 >= 1 ) {
                            goto loop6;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto rulelinearColorEx;
                    }
                    cnt6++;
                }
loop6: ;    /* Jump to here if this rule does not match */
            }
            MATCHT(21, &FOLLOW_21_in_linearColor770);
            if  (HASEXCEPTION()) {
                goto rulelinearColorEx;
            }

            {

                if ( (SCOPE_TOP(ColorSet))->pColorSet->colors.back()->GetColorType() == colorsetdef::COLOR_TYPE_LINEAR) {
                    std::shared_ptr<colorsetdef::LinearColorDO> linearColor =
                        std::dynamic_pointer_cast<colorsetdef::LinearColorDO>
                        (   (SCOPE_TOP(ColorSet))->pColorSet->colors.back());
                    if (label != NULL) {
                        linearColor->label = trimSingleQuote((wchar_t*)(label->getText(label))->chars);
                    }
                }

            }

        }

    }


    // This is where rules clean up and exit
    //
    goto rulelinearColorEx; /* Prevent compiler warnings */
rulelinearColorEx:
    ;

    if (HASEXCEPTION()) {
        PREPORTERROR();
        PRECOVER();
    }


    return ;
}
/* $ANTLR end linearColor */

/**
 * $ANTLR start linearColorDirection
 * ColorSetDef.g:235:1: linearColorDirection : direction= ( 'TOP_BOTTOM' | 'TOPLEFT_BOTTOMRIGHT' ) ;
 */
static void
linearColorDirection(pColorSetDefParser ctx)
{
    pANTLR3_COMMON_TOKEN    direction;

    /* Initialize rule variables
     */


    direction       = NULL;

    {
        // ColorSetDef.g:236:2: (direction= ( 'TOP_BOTTOM' | 'TOPLEFT_BOTTOMRIGHT' ) )
        // ColorSetDef.g:236:4: direction= ( 'TOP_BOTTOM' | 'TOPLEFT_BOTTOMRIGHT' )
        {
            direction = (pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= 23) && (LA(1) <= 24)) ) {
                CONSUME();
                PERRORRECOVERY = ANTLR3_FALSE;
            } else {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_linearColorDirection786;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_linearColorDirection786);
                goto rulelinearColorDirectionEx;
            }

            {

                if ( (SCOPE_TOP(ColorSet))->pColorSet->colors.back()->GetColorType() == colorsetdef::COLOR_TYPE_LINEAR) {
                    std::shared_ptr<colorsetdef::LinearColorDO> linearColor =
                        std::dynamic_pointer_cast<colorsetdef::LinearColorDO>
                        (   (SCOPE_TOP(ColorSet))->pColorSet->colors.back());
                    if (wcscmp((wchar_t*)(direction->getText(direction))->chars, L"TOP_BOTTOM") == 0) {
                        linearColor->direction = colorsetdef::LinearColorDO::DIRECTION_TOP_BOTTOM;
                    } else if (wcscmp((wchar_t*)(direction->getText(direction))->chars, L"TOPLEFT_BOTTOMRIGHT") == 0) {
                        linearColor->direction = colorsetdef::LinearColorDO::DIRECTION_TOPLEFT_BOTTOMRIGHT;
                    }
                }

            }

        }

    }


    // This is where rules clean up and exit
    //
    goto rulelinearColorDirectionEx; /* Prevent compiler warnings */
rulelinearColorDirectionEx:
    ;

    if (HASEXCEPTION()) {
        PREPORTERROR();
        PRECOVER();
    }


    return ;
}
/* $ANTLR end linearColorDirection */

/**
 * $ANTLR start linerColorElement
 * ColorSetDef.g:252:1: linerColorElement : ( rgba | hsba ) '@' pos ;
 */
static void
linerColorElement(pColorSetDefParser ctx)
{
    /* Initialize rule variables
     */


    {
        // ColorSetDef.g:252:19: ( ( rgba | hsba ) '@' pos )
        // ColorSetDef.g:253:2: ( rgba | hsba ) '@' pos
        {

            // ColorSetDef.g:253:2: ( rgba | hsba )
            {
                int alt7 = 2;
                switch ( LA(1) ) {
                case 27: {
                    alt7 = 1;
                }
                break;
                case 28: {
                    alt7 = 2;
                }
                break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 7;
                    EXCEPTION->state        = 0;


                    goto rulelinerColorElementEx;
                }

                switch (alt7) {
                case 1:
                    // ColorSetDef.g:253:4: rgba
                {
                    FOLLOWPUSH(FOLLOW_rgba_in_linerColorElement808);
                    rgba(ctx);

                    FOLLOWPOP();
                    if  (HASEXCEPTION()) {
                        goto rulelinerColorElementEx;
                    }


                }
                break;
                case 2:
                    // ColorSetDef.g:253:11: hsba
                {
                    FOLLOWPUSH(FOLLOW_hsba_in_linerColorElement812);
                    hsba(ctx);

                    FOLLOWPOP();
                    if  (HASEXCEPTION()) {
                        goto rulelinerColorElementEx;
                    }


                }
                break;

                }
            }
            MATCHT(25, &FOLLOW_25_in_linerColorElement816);
            if  (HASEXCEPTION()) {
                goto rulelinerColorElementEx;
            }

            FOLLOWPUSH(FOLLOW_pos_in_linerColorElement818);
            pos(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION()) {
                goto rulelinerColorElementEx;
            }

            {

                if ( (SCOPE_TOP(ColorSet))->pColorSet->colors.back()->GetColorType() == colorsetdef::COLOR_TYPE_LINEAR) {
                    std::shared_ptr<colorsetdef::LinearColorDO> linearColor =
                        std::dynamic_pointer_cast<colorsetdef::LinearColorDO>
                        (   (SCOPE_TOP(ColorSet))->pColorSet->colors.back());
                    colorsetdef::ColorValueDO colorValue(
                        (SCOPE_TOP(ColorSet))->colorValueType,
                        (SCOPE_TOP(ColorSet))->value1,
                        (SCOPE_TOP(ColorSet))->value2,
                        (SCOPE_TOP(ColorSet))->value3,
                        (SCOPE_TOP(ColorSet))->value4,
                        (SCOPE_TOP(ColorSet))->position);
                    linearColor->colorValues.push_back(colorValue);
                }

            }

        }

    }


    // This is where rules clean up and exit
    //
    goto rulelinerColorElementEx; /* Prevent compiler warnings */
rulelinerColorElementEx:
    ;

    if (HASEXCEPTION()) {
        PREPORTERROR();
        PRECOVER();
    }


    return ;
}
/* $ANTLR end linerColorElement */

/**
 * $ANTLR start radialColor
 * ColorSetDef.g:270:1: radialColor : 'radial' ( '[' label= ID ']' )? '(' offsetX= FLOAT ',' offsetY= FLOAT ',' radialColorElement ( ',' radialColorElement )+ ')' ;
 */
static void
radialColor(pColorSetDefParser ctx)
{
    pANTLR3_COMMON_TOKEN    label;
    pANTLR3_COMMON_TOKEN    offsetX;
    pANTLR3_COMMON_TOKEN    offsetY;

    /* Initialize rule variables
     */



    std::shared_ptr<colorsetdef::RadialColorDO> radialColor =
        std::make_shared<colorsetdef::RadialColorDO>();
    (SCOPE_TOP(ColorSet))->pColorSet->colors.push_back(radialColor);

    label       = NULL;
    offsetX       = NULL;
    offsetY       = NULL;

    {
        // ColorSetDef.g:276:2: ( 'radial' ( '[' label= ID ']' )? '(' offsetX= FLOAT ',' offsetY= FLOAT ',' radialColorElement ( ',' radialColorElement )+ ')' )
        // ColorSetDef.g:277:2: 'radial' ( '[' label= ID ']' )? '(' offsetX= FLOAT ',' offsetY= FLOAT ',' radialColorElement ( ',' radialColorElement )+ ')'
        {
            MATCHT(26, &FOLLOW_26_in_radialColor839);
            if  (HASEXCEPTION()) {
                goto ruleradialColorEx;
            }


            // ColorSetDef.g:277:11: ( '[' label= ID ']' )?
            {
                int alt8 = 2;
                switch ( LA(1) ) {
                case 18: {
                    alt8 = 1;
                }
                break;
                }

                switch (alt8) {
                case 1:
                    // ColorSetDef.g:277:12: '[' label= ID ']'
                {
                    MATCHT(18, &FOLLOW_18_in_radialColor842);
                    if  (HASEXCEPTION()) {
                        goto ruleradialColorEx;
                    }

                    label = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_radialColor846);
                    if  (HASEXCEPTION()) {
                        goto ruleradialColorEx;
                    }

                    MATCHT(19, &FOLLOW_19_in_radialColor848);
                    if  (HASEXCEPTION()) {
                        goto ruleradialColorEx;
                    }


                }
                break;

                }
            }
            MATCHT(20, &FOLLOW_20_in_radialColor852);
            if  (HASEXCEPTION()) {
                goto ruleradialColorEx;
            }

            offsetX = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_radialColor856);
            if  (HASEXCEPTION()) {
                goto ruleradialColorEx;
            }

            MATCHT(16, &FOLLOW_16_in_radialColor858);
            if  (HASEXCEPTION()) {
                goto ruleradialColorEx;
            }

            offsetY = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_radialColor862);
            if  (HASEXCEPTION()) {
                goto ruleradialColorEx;
            }

            MATCHT(16, &FOLLOW_16_in_radialColor864);
            if  (HASEXCEPTION()) {
                goto ruleradialColorEx;
            }

            FOLLOWPUSH(FOLLOW_radialColorElement_in_radialColor866);
            radialColorElement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION()) {
                goto ruleradialColorEx;
            }

            // ColorSetDef.g:277:90: ( ',' radialColorElement )+
            {
                int cnt9 = 0;

                for (;;) {
                    int alt9 = 2;
                    switch ( LA(1) ) {
                    case 16: {
                        alt9 = 1;
                    }
                    break;

                    }

                    switch (alt9) {
                    case 1:
                        // ColorSetDef.g:277:91: ',' radialColorElement
                    {
                        MATCHT(16, &FOLLOW_16_in_radialColor869);
                        if  (HASEXCEPTION()) {
                            goto ruleradialColorEx;
                        }

                        FOLLOWPUSH(FOLLOW_radialColorElement_in_radialColor871);
                        radialColorElement(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION()) {
                            goto ruleradialColorEx;
                        }


                    }
                    break;

                    default:

                        if ( cnt9 >= 1 ) {
                            goto loop9;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto ruleradialColorEx;
                    }
                    cnt9++;
                }
loop9: ;    /* Jump to here if this rule does not match */
            }
            MATCHT(21, &FOLLOW_21_in_radialColor875);
            if  (HASEXCEPTION()) {
                goto ruleradialColorEx;
            }

            {

                if ( (SCOPE_TOP(ColorSet))->pColorSet->colors.back()->GetColorType() == colorsetdef::COLOR_TYPE_RADIAL) {
                    std::shared_ptr<colorsetdef::RadialColorDO> radialColor =
                        std::dynamic_pointer_cast<colorsetdef::RadialColorDO>
                        (   (SCOPE_TOP(ColorSet))->pColorSet->colors.back());
                    if (label != NULL) {
                        radialColor->label = trimSingleQuote((wchar_t*)(label->getText(label))->chars);
                    }
                    radialColor->offsetX = pu8tof((offsetX->getText(offsetX))->chars);
                    radialColor->offsetY = pu8tof((offsetY->getText(offsetY))->chars);
                }

            }

        }

    }


    // This is where rules clean up and exit
    //
    goto ruleradialColorEx; /* Prevent compiler warnings */
ruleradialColorEx:
    ;

    if (HASEXCEPTION()) {
        PREPORTERROR();
        PRECOVER();
    }


    return ;
}
/* $ANTLR end radialColor */

/**
 * $ANTLR start radialColorElement
 * ColorSetDef.g:292:1: radialColorElement : ( rgba | hsba ) '@' pos ;
 */
static void
radialColorElement(pColorSetDefParser ctx)
{
    /* Initialize rule variables
     */


    {
        // ColorSetDef.g:292:20: ( ( rgba | hsba ) '@' pos )
        // ColorSetDef.g:293:2: ( rgba | hsba ) '@' pos
        {

            // ColorSetDef.g:293:2: ( rgba | hsba )
            {
                int alt10 = 2;
                switch ( LA(1) ) {
                case 27: {
                    alt10 = 1;
                }
                break;
                case 28: {
                    alt10 = 2;
                }
                break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 10;
                    EXCEPTION->state        = 0;


                    goto ruleradialColorElementEx;
                }

                switch (alt10) {
                case 1:
                    // ColorSetDef.g:293:4: rgba
                {
                    FOLLOWPUSH(FOLLOW_rgba_in_radialColorElement891);
                    rgba(ctx);

                    FOLLOWPOP();
                    if  (HASEXCEPTION()) {
                        goto ruleradialColorElementEx;
                    }


                }
                break;
                case 2:
                    // ColorSetDef.g:293:11: hsba
                {
                    FOLLOWPUSH(FOLLOW_hsba_in_radialColorElement895);
                    hsba(ctx);

                    FOLLOWPOP();
                    if  (HASEXCEPTION()) {
                        goto ruleradialColorElementEx;
                    }


                }
                break;

                }
            }
            MATCHT(25, &FOLLOW_25_in_radialColorElement899);
            if  (HASEXCEPTION()) {
                goto ruleradialColorElementEx;
            }

            FOLLOWPUSH(FOLLOW_pos_in_radialColorElement901);
            pos(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION()) {
                goto ruleradialColorElementEx;
            }

            {

                if ( (SCOPE_TOP(ColorSet))->pColorSet->colors.back()->GetColorType() == colorsetdef::COLOR_TYPE_RADIAL) {
                    std::shared_ptr<colorsetdef::RadialColorDO> radialColor =
                        std::dynamic_pointer_cast<colorsetdef::RadialColorDO>
                        (   (SCOPE_TOP(ColorSet))->pColorSet->colors.back());
                    colorsetdef::ColorValueDO colorValue(
                        (SCOPE_TOP(ColorSet))->colorValueType,
                        (SCOPE_TOP(ColorSet))->value1,
                        (SCOPE_TOP(ColorSet))->value2,
                        (SCOPE_TOP(ColorSet))->value3,
                        (SCOPE_TOP(ColorSet))->value4,
                        (SCOPE_TOP(ColorSet))->position
                    );
                    radialColor->colorValues.push_back(colorValue);
                }

            }

        }

    }


    // This is where rules clean up and exit
    //
    goto ruleradialColorElementEx; /* Prevent compiler warnings */
ruleradialColorElementEx:
    ;

    if (HASEXCEPTION()) {
        PREPORTERROR();
        PRECOVER();
    }


    return ;
}
/* $ANTLR end radialColorElement */

/**
 * $ANTLR start rgba
 * ColorSetDef.g:311:1: rgba : ( ( 'rgba(' r= FLOAT ',' g= FLOAT ',' b= FLOAT ',' a= FLOAT ')' ) | ( 'rgba(' rgb= HEXINT ',' a= FLOAT ')' ) );
 */
static void
rgba(pColorSetDefParser ctx)
{
    pANTLR3_COMMON_TOKEN    r;
    pANTLR3_COMMON_TOKEN    g;
    pANTLR3_COMMON_TOKEN    b;
    pANTLR3_COMMON_TOKEN    a;
    pANTLR3_COMMON_TOKEN    rgb;

    /* Initialize rule variables
     */


    r       = NULL;
    g       = NULL;
    b       = NULL;
    a       = NULL;
    rgb       = NULL;

    {
        {
            //  ColorSetDef.g:311:6: ( ( 'rgba(' r= FLOAT ',' g= FLOAT ',' b= FLOAT ',' a= FLOAT ')' ) | ( 'rgba(' rgb= HEXINT ',' a= FLOAT ')' ) )

            ANTLR3_UINT32 alt11;

            alt11 = 2;

            switch ( LA(1) ) {
            case 27: {
                switch ( LA(2) ) {
                case FLOAT: {
                    alt11 = 1;
                }
                break;
                case HEXINT: {
                    alt11 = 2;
                }
                break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 11;
                    EXCEPTION->state        = 1;


                    goto rulergbaEx;
                }

            }
            break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 11;
                EXCEPTION->state        = 0;


                goto rulergbaEx;
            }

            switch (alt11) {
            case 1:
                // ColorSetDef.g:312:2: ( 'rgba(' r= FLOAT ',' g= FLOAT ',' b= FLOAT ',' a= FLOAT ')' )
            {
                // ColorSetDef.g:312:2: ( 'rgba(' r= FLOAT ',' g= FLOAT ',' b= FLOAT ',' a= FLOAT ')' )
                // ColorSetDef.g:312:3: 'rgba(' r= FLOAT ',' g= FLOAT ',' b= FLOAT ',' a= FLOAT ')'
                {
                    MATCHT(27, &FOLLOW_27_in_rgba916);
                    if  (HASEXCEPTION()) {
                        goto rulergbaEx;
                    }

                    r = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_rgba920);
                    if  (HASEXCEPTION()) {
                        goto rulergbaEx;
                    }

                    MATCHT(16, &FOLLOW_16_in_rgba922);
                    if  (HASEXCEPTION()) {
                        goto rulergbaEx;
                    }

                    g = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_rgba926);
                    if  (HASEXCEPTION()) {
                        goto rulergbaEx;
                    }

                    MATCHT(16, &FOLLOW_16_in_rgba928);
                    if  (HASEXCEPTION()) {
                        goto rulergbaEx;
                    }

                    b = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_rgba932);
                    if  (HASEXCEPTION()) {
                        goto rulergbaEx;
                    }

                    MATCHT(16, &FOLLOW_16_in_rgba934);
                    if  (HASEXCEPTION()) {
                        goto rulergbaEx;
                    }

                    a = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_rgba938);
                    if  (HASEXCEPTION()) {
                        goto rulergbaEx;
                    }

                    MATCHT(21, &FOLLOW_21_in_rgba940);
                    if  (HASEXCEPTION()) {
                        goto rulergbaEx;
                    }


                }

                {

                    (SCOPE_TOP(ColorSet))->colorValueType = colorsetdef::COLORVALUE_TYPE_RGBA;
                    (SCOPE_TOP(ColorSet))->value1 = pu8tof((r->getText(r))->chars);
                    (SCOPE_TOP(ColorSet))->value2 = pu8tof((g->getText(g))->chars);
                    (SCOPE_TOP(ColorSet))->value3 = pu8tof((b->getText(b))->chars);
                    (SCOPE_TOP(ColorSet))->value4 = pu8tof((a->getText(a))->chars);

                }

            }
            break;
            case 2:
                // ColorSetDef.g:320:2: ( 'rgba(' rgb= HEXINT ',' a= FLOAT ')' )
            {
                // ColorSetDef.g:320:2: ( 'rgba(' rgb= HEXINT ',' a= FLOAT ')' )
                // ColorSetDef.g:320:3: 'rgba(' rgb= HEXINT ',' a= FLOAT ')'
                {
                    MATCHT(27, &FOLLOW_27_in_rgba951);
                    if  (HASEXCEPTION()) {
                        goto rulergbaEx;
                    }

                    rgb = (pANTLR3_COMMON_TOKEN) MATCHT(HEXINT, &FOLLOW_HEXINT_in_rgba955);
                    if  (HASEXCEPTION()) {
                        goto rulergbaEx;
                    }

                    MATCHT(16, &FOLLOW_16_in_rgba957);
                    if  (HASEXCEPTION()) {
                        goto rulergbaEx;
                    }

                    a = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_rgba961);
                    if  (HASEXCEPTION()) {
                        goto rulergbaEx;
                    }

                    MATCHT(21, &FOLLOW_21_in_rgba963);
                    if  (HASEXCEPTION()) {
                        goto rulergbaEx;
                    }


                }

                {

                    (SCOPE_TOP(ColorSet))->colorValueType = colorsetdef::COLORVALUE_TYPE_RGBA;
                    float value1, value2, value3;
                    parse3values((rgb->getText(rgb))->chars, &value1, &value2, &value3);
                    (SCOPE_TOP(ColorSet))->value1 = value1;
                    (SCOPE_TOP(ColorSet))->value2 = value2;
                    (SCOPE_TOP(ColorSet))->value3 = value3;
                    (SCOPE_TOP(ColorSet))->value4 = pu8tof((a->getText(a))->chars);

                }

            }
            break;

            }
        }
    }


    // This is where rules clean up and exit
    //
    goto rulergbaEx; /* Prevent compiler warnings */
rulergbaEx:
    ;

    if (HASEXCEPTION()) {
        PREPORTERROR();
        PRECOVER();
    }


    return ;
}
/* $ANTLR end rgba */

/**
 * $ANTLR start hsba
 * ColorSetDef.g:331:1: hsba : 'hsba(' h= FLOAT ',' s= FLOAT ',' b= FLOAT ',' a= FLOAT ')' ;
 */
static void
hsba(pColorSetDefParser ctx)
{
    pANTLR3_COMMON_TOKEN    h;
    pANTLR3_COMMON_TOKEN    s;
    pANTLR3_COMMON_TOKEN    b;
    pANTLR3_COMMON_TOKEN    a;

    /* Initialize rule variables
     */


    h       = NULL;
    s       = NULL;
    b       = NULL;
    a       = NULL;

    {
        // ColorSetDef.g:331:6: ( 'hsba(' h= FLOAT ',' s= FLOAT ',' b= FLOAT ',' a= FLOAT ')' )
        // ColorSetDef.g:332:2: 'hsba(' h= FLOAT ',' s= FLOAT ',' b= FLOAT ',' a= FLOAT ')'
        {
            MATCHT(28, &FOLLOW_28_in_hsba978);
            if  (HASEXCEPTION()) {
                goto rulehsbaEx;
            }

            h = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_hsba982);
            if  (HASEXCEPTION()) {
                goto rulehsbaEx;
            }

            MATCHT(16, &FOLLOW_16_in_hsba984);
            if  (HASEXCEPTION()) {
                goto rulehsbaEx;
            }

            s = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_hsba988);
            if  (HASEXCEPTION()) {
                goto rulehsbaEx;
            }

            MATCHT(16, &FOLLOW_16_in_hsba990);
            if  (HASEXCEPTION()) {
                goto rulehsbaEx;
            }

            b = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_hsba994);
            if  (HASEXCEPTION()) {
                goto rulehsbaEx;
            }

            MATCHT(16, &FOLLOW_16_in_hsba996);
            if  (HASEXCEPTION()) {
                goto rulehsbaEx;
            }

            a = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_hsba1000);
            if  (HASEXCEPTION()) {
                goto rulehsbaEx;
            }

            MATCHT(21, &FOLLOW_21_in_hsba1002);
            if  (HASEXCEPTION()) {
                goto rulehsbaEx;
            }

            {

                (SCOPE_TOP(ColorSet))->colorValueType = colorsetdef::COLORVALUE_TYPE_HSBA;
                (SCOPE_TOP(ColorSet))->value1 = pu8tof((h->getText(h))->chars);
                (SCOPE_TOP(ColorSet))->value2 = pu8tof((s->getText(s))->chars);
                (SCOPE_TOP(ColorSet))->value3 = pu8tof((b->getText(b))->chars);
                (SCOPE_TOP(ColorSet))->value4 = pu8tof((a->getText(a))->chars);

            }

        }

    }


    // This is where rules clean up and exit
    //
    goto rulehsbaEx; /* Prevent compiler warnings */
rulehsbaEx:
    ;

    if (HASEXCEPTION()) {
        PREPORTERROR();
        PRECOVER();
    }


    return ;
}
/* $ANTLR end hsba */

/**
 * $ANTLR start pos
 * ColorSetDef.g:342:1: pos : value= FLOAT ;
 */
static void
pos(pColorSetDefParser ctx)
{
    pANTLR3_COMMON_TOKEN    value;

    /* Initialize rule variables
     */


    value       = NULL;

    {
        // ColorSetDef.g:342:5: (value= FLOAT )
        // ColorSetDef.g:342:7: value= FLOAT
        {
            value = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT, &FOLLOW_FLOAT_in_pos1017);
            if  (HASEXCEPTION()) {
                goto ruleposEx;
            }

            {

                (SCOPE_TOP(ColorSet))->position = pu8tof((value->getText(value))->chars);

            }

        }

    }


    // This is where rules clean up and exit
    //
    goto ruleposEx; /* Prevent compiler warnings */
ruleposEx:
    ;

    if (HASEXCEPTION()) {
        PREPORTERROR();
        PRECOVER();
    }


    return ;
}
/* $ANTLR end pos */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
